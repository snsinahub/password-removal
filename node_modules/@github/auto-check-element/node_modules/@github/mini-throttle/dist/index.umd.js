function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.index = mod.exports;
  }
})((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object" ? globalThis : (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" ? self : this, function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.throttle = throttle;
  _exports.debounce = debounce;

  function throttle(callback, wait = 0, {
    start = true,
    middle = true,
    once = false
  } = {}) {
    var last = 0;
    var timer;
    var cancelled = false;

    var fn = function fn(...args) {
      if (cancelled) return;
      var delta = Date.now() - last;
      last = Date.now();

      if (start) {
        //eslint-disable-next-line flowtype/no-flow-fix-me-comments
        // $FlowFixMe this isn't a const
        start = false;
        callback(...args);
        if (once) fn.cancel();
      } else if (middle && delta < wait || !middle) {
        clearTimeout(timer);
        timer = setTimeout(function () {
          last = Date.now();
          callback(...args);
          if (once) fn.cancel();
        }, !middle ? wait : wait - delta);
      }
    };

    fn.cancel = function () {
      clearTimeout(timer);
      cancelled = true;
    };

    return fn;
  }

  function debounce(callback, wait = 0, {
    start = false,
    middle = false,
    once = false
  } = {}) {
    return throttle(callback, wait, {
      start: start,
      middle: middle,
      once: once
    });
  }
});

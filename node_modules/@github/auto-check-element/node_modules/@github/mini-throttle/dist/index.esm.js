export function throttle(callback, wait = 0, {
  start = true,
  middle = true,
  once = false
} = {}) {
  var last = 0;
  var timer;
  var cancelled = false;

  var fn = function fn(...args) {
    if (cancelled) return;
    var delta = Date.now() - last;
    last = Date.now();

    if (start) {
      //eslint-disable-next-line flowtype/no-flow-fix-me-comments
      // $FlowFixMe this isn't a const
      start = false;
      callback(...args);
      if (once) fn.cancel();
    } else if (middle && delta < wait || !middle) {
      clearTimeout(timer);
      timer = setTimeout(function () {
        last = Date.now();
        callback(...args);
        if (once) fn.cancel();
      }, !middle ? wait : wait - delta);
    }
  };

  fn.cancel = function () {
    clearTimeout(timer);
    cancelled = true;
  };

  return fn;
}
export function debounce(callback, wait = 0, {
  start = false,
  middle = false,
  once = false
} = {}) {
  return throttle(callback, wait, {
    start: start,
    middle: middle,
    once: once
  });
}
